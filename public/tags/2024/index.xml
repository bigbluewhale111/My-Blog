<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2024 on My New Hugo Site</title>
    <link>http://localhost:1313/tags/2024/</link>
    <description>Recent content in 2024 on My New Hugo Site</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Feb 2025 15:16:21 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ImaginaryCTF 2024</title>
      <link>http://localhost:1313/writeups/imaginaryctf2024/</link>
      <pubDate>Wed, 05 Feb 2025 15:16:21 +0700</pubDate>
      <guid>http://localhost:1313/writeups/imaginaryctf2024/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This is a writeup for some web challenge for ImaginaryCTF 2024&lt;/p&gt;
&lt;h2 id=&#34;readme&#34;&gt;Readme&lt;/h2&gt;
&lt;p&gt;Well, simply read the Dockerfile and got the flag.
That was the unintended way, the authentic way was bypass the $request_filename. So if we make request GET /flag.txt directly, nginx will recognize the $request_filename. So if we make request GET /flag.txt/., then nginx will treat this as a path and NodeJS will resolve the file and we will get the flag.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
