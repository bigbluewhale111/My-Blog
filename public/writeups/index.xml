<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Writeups on My New Hugo Site</title>
    <link>http://localhost:1313/writeups/</link>
    <description>Recent content in Writeups on My New Hugo Site</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Feb 2025 15:19:06 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/writeups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AmateursCTF2024</title>
      <link>http://localhost:1313/writeups/amateursctf2024/</link>
      <pubDate>Wed, 05 Feb 2025 15:19:06 +0700</pubDate>
      <guid>http://localhost:1313/writeups/amateursctf2024/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This is a writeup for some web challenge for AmateursCTF 2024&lt;/p&gt;
&lt;h2 id=&#34;lahoot&#34;&gt;Lahoot&lt;/h2&gt;
&lt;p&gt;This is a very fun challenge, just for trolling.
By dirsearch, we will find a hidden endpoint which is /docs.
&lt;img alt=&#34;gay2&#34; loading=&#34;lazy&#34; src=&#34;https://hackmd.io/_uploads/BkXdN9vl0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Wow, there is /api/question/{question_id}&lt;/p&gt;
&lt;p&gt;And the id is in the HTML itself, in the attribute data-id&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;gay6&#34; loading=&#34;lazy&#34; src=&#34;https://hackmd.io/_uploads/r1PuHcPxR.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;I plugged 1 question id in, and get this&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;gay4&#34; loading=&#34;lazy&#34; src=&#34;https://hackmd.io/_uploads/rkH-H9wl0.png&#34;&gt;
Finally, we can use python script to automate all of these.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AngstromCTF2024</title>
      <link>http://localhost:1313/writeups/angstromctf2024/</link>
      <pubDate>Wed, 05 Feb 2025 15:18:06 +0700</pubDate>
      <guid>http://localhost:1313/writeups/angstromctf2024/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This is a writeup for some web challenge for AngstromCTF 2024&lt;/p&gt;
&lt;h2 id=&#34;spinner&#34;&gt;Spinner&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-javascript=&#34; data-lang=&#34;javascript=&#34;&gt;const message = async () =&amp;gt; {
    if (state.flagged) return
    const element = document.querySelector(&amp;#39;.message&amp;#39;)
    element.textContent = Math.floor(state.total / 360)
    if (state.total &amp;gt;= 10_000 * 360) {
        state.flagged = true
        const response = await fetch(&amp;#39;/falg&amp;#39;, { method: &amp;#39;POST&amp;#39; })
        element.textContent = await response.text()
    }
}
message()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can simply make POST request to /falg or using the console to assign the state.total to any number larger than stated above.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ImaginaryCTF2024</title>
      <link>http://localhost:1313/writeups/imaginaryctf2024/</link>
      <pubDate>Wed, 05 Feb 2025 15:16:21 +0700</pubDate>
      <guid>http://localhost:1313/writeups/imaginaryctf2024/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This is a writeup for some web challenge for ImaginaryCTF 2024&lt;/p&gt;
&lt;h2 id=&#34;readme&#34;&gt;Readme&lt;/h2&gt;
&lt;p&gt;Well, simply read the Dockerfile and got the flag.
That was the unintended way, the authentic way was bypass the $request_filename. So if we make request GET /flag.txt directly, nginx will recognize the $request_filename. So if we make request GET /flag.txt/., then nginx will treat this as a path and NodeJS will resolve the file and we will get the flag.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
